#BlueJ class context
comment0.params=
comment0.target=CalcEngine()
comment0.text=\r\n\ Create\ a\ CalcEngine\ instance.\r\n
comment1.params=
comment1.target=java.lang.String\ getDisplayValue()
comment1.text=\r\n\ Return\ the\ value\ that\ should\ currently\ be\ displayed\r\n\ on\ the\ calculator\ display.\r\n
comment10.params=
comment10.target=void\ powerTo()
comment11.params=
comment11.target=void\ leftParenthesis()
comment12.params=
comment12.target=void\ rightParenthesis()
comment13.params=
comment13.target=void\ pi()
comment13.text=\r\n\ Pi\ is\ a\ slightly\ special\ case,\ when\ the\ method\ is\ called\ it\ assigns\ Pi\ directly\ to\ the\ Operand,\ bypassing\ display\ Values\r\n
comment14.params=
comment14.target=void\ equals()
comment14.text=\r\n\ The\ '\='\ button\ was\ pressed.\ This\ does\ a\ lot\ here,\ first\ a\ new\ String\ array\ is\ made\ that\ that\ is\ the\ size\ of\ the\ input\ List.\r\n\ then\ we\ pass\ the\ list\ of\ input\ to\ the\ String\ array,\ and\ pass\ it\ to\ the\ RPN\ converter.\ This\ changes\ the\ infix\ notation\ to\r\n\ post\ fix,\ which,\ in\ the\ next\ step,\ we\ evaluate.\ This\ result\ is\ returned\ to\ the\ display\ value.\ \r\n
comment15.params=
comment15.target=void\ clear()
comment15.text=\r\n\ The\ 'C'\ (clear)\ button\ was\ pressed.\r\n\ Reset\ everything\ to\ a\ starting\ state.\ We\ need\ to\ reset\ the\ String\ list\ we\ were\ adding\ input\ on\ to,\r\n\ luckily\ ArrayList\ has\ a\ built\ in\ method\ clear()\ which\ does\ this\ for\ us.\ We\ also\ reset\ the\ display\ value\ and\r\n\ status\ of\ building\ the\ display.\ \r\n
comment16.params=
comment16.target=java.lang.String\ getTitle()
comment16.text=\r\n\ Return\ the\ title\ of\ this\ calculation\ engine.\r\n
comment17.params=
comment17.target=java.lang.String\ getAuthor()
comment17.text=\r\n\ Return\ the\ author\ of\ this\ engine.\r\n
comment18.params=
comment18.target=java.lang.String\ getVersion()
comment18.text=\r\n\ Return\ the\ version\ number\ of\ this\ engine.\r\n
comment19.params=operator
comment19.target=void\ applyOperator(java.lang.String)
comment19.text=\r\n\ When\ an\ operator\ is\ applied,\ first\ it\ will\ finally\ add\ the\ left\ operand\ we\ have\ been\ saving\ to\ the\ list\r\n\ then\ it\ will\ add\ the\ operator\ itself\ to\ the\ list.\ We\ also\ use\ this\ to\ reset\ the\ status\ of\ building\ display\ value\r\n\ \r\n
comment2.params=number
comment2.target=void\ numberPressed(java.lang.String)
comment2.text=\r\n\ This\ method\ first\ gets\ a\ double\ of\ what\ number\ was\ pressed\ on\ the\ calculator,\ (We\ passed\ it\ as\ a\ String\ called\ 'number'\ in\ the\ method\ parameters)\r\n\ It\ then\ checks\ if\ a\ display\ value\ is\ being\ built.\ If\ we're\ not\ building\ a\ display\ value,\ display\ the\ number\ on\ screen,\ and\ set\ it\ to\ be\ our\ left\ operand\ for\ now,\ and\ \r\n\ make\ it\ known\ that\ we\ are\ done\ building\ a\ display\ value.\ If\ we're\ not\ building\ a\ display\ value(we\ already\ have\ one)\ and\ a\ number\ is\ pressed,\ 'append'\ the\ \r\n\ second\ number\ to\ the\ first\ by\ doing\ the\ simple\ math.\ Each\ time\ we're\ updating\ what\ the\ operand\ is\ but\ not\ adding\ it\ onto\ our\ String\ array\ until\ '\='\ is\ pressed.\r\n
comment3.params=
comment3.target=void\ plus()
comment3.text=\r\n\ The\ 'plus'\ button\ was\ pressed.\ \r\n
comment4.params=
comment4.target=void\ minus()
comment4.text=\r\n\ The\ 'minus'\ button\ was\ pressed.\r\n
comment5.params=
comment5.target=void\ times()
comment6.params=
comment6.target=void\ SQRT()
comment7.params=
comment7.target=void\ log()
comment8.params=
comment8.target=void\ ln()
comment9.params=
comment9.target=void\ cuberoot()
numComments=20
